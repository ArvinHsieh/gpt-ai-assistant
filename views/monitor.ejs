<!DOCTYPE html>
<html lang="zh-tw">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LINE Bot 監控</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #e6f7ff;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: flex-start;
        }

        .container {
            display: flex;
            gap: 20px;
            width: 95%;
            flex-wrap: nowrap;
        }

        .table-container {
            background-color: #ffffff;
            border: 1px solid #cce7ff;
            border-radius: 8px;
            padding: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
            min-height: 300px;
        }

        .table-container-left {
            flex: 0 1 70%;
        }

        .table-container-right {
            flex: 0 1 30%;
        }

        .table-header {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 10px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #cce7ff;
            padding: 8px;
            text-align: center;
        }

        th {
            background-color: #b3e0ff;
            color: #003366;
        }

        td {
            background-color: #f0faff;
        }

        button {
            padding: 10px 20px;
            font-size: 1em;
            color: #fff;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        input[type="text"] {
            padding: 10px;
            font-size: 1em;
            border: 1px solid #cce7ff;
            border-radius: 5px;
            width: 200px;
        }

        @media (max-width: 768px) {
            .container {
                flex-wrap: wrap;
            }

            .table-container {
                flex: 0 0 100%;
            }

            .table-container-left {
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">

        <!-- 左側表格 -->
        <div class="table-container table-container-left">
            <caption>聯絡人清單</caption>
            <div class="table-header">
                <button onclick="refreshAll()">重新整理</button>
                <input id="displayName" type="text" placeholder="搜尋內容">
                <button onclick="searchUser()">搜尋</button>
            </div>
            <table id="users-table">
                <thead>
                    <tr>
                        <th>最後時間</th>
                        <th>照片</th>
                        <th>暱稱</th>
                        <th>代號</th>
                        <th>功能</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- 動態內容 -->
                </tbody>
            </table>
        </div>

        <!-- 右側表格 -->
        <div class="table-container table-container-right">
            <caption>暫停AI回應清單</caption>
            <div class="table-header">
                <input id="stop-user-id" type="text" placeholder="新增內容">
                <button onclick="addStopUser()">新增</button>
            </div>
            <table id="stop-user-table">
                <thead>
                    <tr>
                        <th>代號</th>
                        <th>功能</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- 動態內容 -->
                </tbody>
            </table>
        </div>

    </div>
    <script>
        const opDelay = 500;
      
        async function searchUser() {
            try {
                const input = document.getElementById('displayName');
                fetch('/users')
                .then(response => response.json())
                .then(data => {
                    const usersTableBody = document.querySelector('#users-table tbody');
                    usersTableBody.innerHTML = "";

                    const fData = data.filter(x => x.displayName.toLowerCase().indexOf(input.value.toLowerCase()) >= 0);
                    const row = document.createElement('tr');
                    fData.forEach(d => {
                        row.innerHTML = `
                        <td>${timeToYYYYMMDD(d.lastMessageTime)}</td>
                        <td><img src='${d.pictureUrl}' width="50" /></td>
                        <td>${d.displayName}</td>
                        <td>${d.userId}</td>
                        <td><button onclick="removeUser('${d.userId}')">刪除</button>
                            <button onclick="addStopUser('${d.userId}')">AI 暫停</button></td>`;
                        usersTableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error fetching data:', error));
            } catch (error) {
                console.error('Error adding entry:', error);
            }
        }

        async function removeUser(userId) {
            try {
                const response = await fetch(`/removeUser/${userId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                });
                if (!response.ok) throw new Error('Failed to add entry');
                setTimeout(() => {
                    refreshUsersTables();
                }, opDelay);
            } catch (error) {
                console.error('Error adding entry:', error);
            }
        }

        async function removeStopUser(userId) {
            try {
                const response = await fetch(`/removeStopUser/${userId}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                });
                if (!response.ok) throw new Error('Failed to add entry');
                setTimeout(() => {
                    refreshStopUserTables();
                }, opDelay);
            } catch (error) {
                console.error('Error adding entry:', error);
            }
        }

        async function addStopUser(uId) {
            try {
                var userId;
                const input = document.getElementById('stop-user-id');
                if (uId) {
                    userId = uId;
                } else {
                    userId = input.value.trim();
                }
                if (userId) {
                    const response = await fetch(`/addStopUser/${userId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                    });
                    if (!response.ok) throw new Error('Failed to add entry');
                    input.value = '';
                    setTimeout(() => {
                        refreshStopUserTables();
                    }, opDelay);
                } else {
                    alert('請輸入有效的內容');
                }
            } catch (error) {
                console.error('Error adding entry:', error);
            }
        }
        
        function refreshUsersTables(){
            const usersTableBody = document.querySelector('#users-table tbody');
            usersTableBody.innerHTML = "";
            fetch('/users')
            .then(response => response.json())
            .then(data => {
                const row = document.createElement('tr');
                data.forEach(d => {
                    row.innerHTML = `
                    <td>${timeToYYYYMMDD(d.lastMessageTime)}</td>
                    <td><img src='${d.pictureUrl}' width="50" /></td>
                    <td>${d.displayName}</td>
                    <td>${d.userId}</td>
                    <td><button onclick="removeUser('${d.userId}')">刪除</button>
                        <button onclick="addStopUser('${d.userId}')">AI 暫停</button></td>`;
                    usersTableBody.appendChild(row);
                });
            })
            .catch(error => console.error('Error fetching data:', error));
        }

        function refreshStopUserTables(){
            const stopUserTableBody = document.querySelector('#stop-user-table tbody');
            stopUserTableBody.innerHTML = "";
            fetch('/stopUsers')
            .then(response => response.json())
            .then(data => {
                data.forEach(d => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <td>${d.key}</td>
                    <td><button onclick="removeStopUser('${d.key}')">刪除</button></td>`;
                    stopUserTableBody.appendChild(row);
                });
            })
            .catch(error => console.error('Error fetching data:', error));
        }

        function refreshAll(){
            const input = document.getElementById('displayName');
            input.value = '';
            refreshUsersTables();
            refreshStopUserTables();
        }

        function timeToYYYYMMDD(timestamp) {
            const date = new Date(timestamp);
            const options = {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false, // 使用 24 小時制
            };

            const formattedDate = new Intl.DateTimeFormat('zh-tw', options)
            .format(date)
            .replace(',', ''); // 去掉日期和時間之間的逗號

            return formattedDate;
        }

        // 等待 DOM 加載完成後執行
        document.addEventListener('DOMContentLoaded', () => {
            refreshUsersTables();
            refreshStopUserTables();
        });
    </script>
</body>
</html>
